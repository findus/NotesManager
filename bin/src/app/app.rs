use clap::{App, Arg, AppSettings};

pub fn gen_app() -> App<'static> {
    let app = App::new("NotesManager")
        .setting(AppSettings::ArgRequiredElseHelp)
        .version(env!("CARGO_PKG_VERSION"))
        .subcommand(App::new("list")
            .about("Lists all available notes")
            .arg(Arg::new("uuid")
                .short('u')
                .long("uuid")
                .help_heading("Prints additional uuid")
                .required(false)
            )
        )
        .about("Interface for interacting with Apple Notes on Linux")
        .subcommand(App::new("edit")
            .about("Edits an existing note")
            .arg(Arg::with_name("path")
                .required(true)
                .takes_value(true)
                .help("Subject or UUID of the note that should be edited")
            )
        )
        .subcommand(App::new("sync")
            .about("Syncs local with remote notes and vice versa")
        )
        .subcommand(App::new("delete")
            .about("Flags a note as deleted")
            .arg(Arg::with_name("path")
                .required(true)
                .takes_value(true)
                .help("Subject or UUID of the note that should be deleted")
            )
        )
        .subcommand(App::new("undelete")
            .about("Removes deletion flag")
            .arg(Arg::with_name("path")
                .required(true)
                .takes_value(true)
                .help("Subject or UUID of the note")
            )
        )
        .subcommand(App::new("merge")
            .about("Merges unmerged Note")
            .arg(Arg::with_name("path")
                .required(true)
                .takes_value(true)
                .help("Subject or UUID of the note that should be merged")
            )
        )
        .subcommand(App::new("print")
            .about("Prints note content")
            .arg(Arg::with_name("path")
                .required(true)
                .takes_value(true)
                .help("Subject or UUID of the note that should be printed")
            )
        )
        .subcommand(App::new("backup")
            .about("Duplicates current note tree on the imap server")
        )
        .subcommand(App::new("new")
            .about("Creates a new note")
            .arg(Arg::with_name("folder")
                .short("f")
                .long("folder")
                .help("Specifies the subfolder where the note should be put in. Uses default folder, if not used")
                .required(false)
                .takes_value(true)
            )
            .arg(Arg::with_name("title")
                .required(true)
                .takes_value(true)
                .help("Title of the new note")
            )
        );
    app
}
